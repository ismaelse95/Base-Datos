#TODOS LOS EJERCICIOS ESTAN REALIZADOS CON LA CUENTA SCOTT DE ORACLE

1.-Haz una función llamada DevolverCodDept que reciba el nombre de un departamento y devuelva su código.

create or replace function DevolverCodDept(p_nombre dept.dname%type)
return dept.deptno%type
is
	v_codigo	dept.deptno%type;
begin
	select deptno into v_codigo
	from dept
	where dname = p_nombre;
	return v_codigo;
exception
	when NO_DATA_FOUND then
		dbms_output.put_line('No existe el nombre de departamento '||p_nombre)
end DevolverCodDept;
/

SELECT DevolverCodDept('SALES') FROM DUAL;

2.-Realiza un procedimiento llamado HallarNumEmp que recibiendo un nombre de departamento, muestre en pantalla el 
número de empleados de dicho departamento. Puedes utilizar la función creada en el ejercicio 1.

Si el departamento no tiene empleados deberá mostrar un mensaje informando de ello. Si el departamento no existe 
se tratará la excepción correspondiente.

create or replace procedure HallarNumEmp(p_nombre dept.dname%type)
is
	v_codigodept		dept.deptno%type;
	v_numeroempleado	NUMBER;
begin
	v_codigodept:=DevolverCodDept(p_nombre);
	select count(*) into v_numeroempleado
	from emp
	where deptno=v_codigodept;
	if v_numeroempleado = 0 then
		dbms_output.put_line('No existe el empleado'||p_nombre)
	end if;
end HallarNumEmp;
/

3.-Realiza una función llamada CalcularCosteSalarial que reciba un nombre de departamento y devuelva la suma 
de los salarios y comisiones de los empleados de dicho departamento. Trata las excepciones que consideres necesarias.

create or replace function CalcularCosteSalarial(p_nombredept	dept.deptno%type)
return NUMBER
is
	v_codigodept	dept.deptno%type;
	v_total			NUMBER;
begin
	v_codigodept:=DevolverCodDept(p_nombre)
	select sum(sal+nvl(comm,0)) into v_total
	from emp
	where deptno=v_codigodept;
	return v_total;
end CalcularCosteSalarial;
/

4.-Realiza un procedimiento MostrarCostesSalariales que muestre los nombres de todos los departamentos 
y el coste salarial de cada uno de ellos. Puedes usar la función del ejercicio 3.

create or replace procedure MostrarCostesSalariales
is
	cursor c_nombredept
	select dname
	from dept;
	v_total		NUMBER;
	v_nombre	dept.dname%type;
begin
	open c_nombredept;
	fetch c_nombredept into v_dept;
	while c_nombredept%FOUND loop
		v_total:=CalcularCostesSalariales(v_nombre);
		dbms_output.put_line(v_dept.dname||' '||v_total);
		fetch c_nombredept into v_dept;
	end loop;
	close c_dept;
end MostrarCostesSalariales;
/

5.-Realiza un procedimiento MostrarAbreviaturas que muestre las tres primeras letras del nombre de cada empleado.

create or replace procedure MostrarAbreviaturas
is
	cursor c_emp
	is
	select ename
	from emp;
begin
	for elem in c_emp loop
		dbms_output.put_line(substr(elem.ename,1,3));
	end loop;
end MostrarAbreviaturas;
/

6.-Realiza un procedimiento MostrarMasAntiguos que muestre el nombre del empleado más antiguo de cada departamento 
junto con el nombre del departamento. Trata las excepciones que consideres necesarias.

create or replace procedure MostrarMasAntiguos
is
	cursor c_emp
	is
	select ename, dname
	from emp e, dept d
	where e.deptno=d.deptno
	and hiredate = (select min(hiredate)
					from emp e2
					where e2.deptno=e.deptno);
begin
	for elem in c_emp loop
		dbms_output.put_line(elem.ename||' = '||elem.dname);
	end loop;
end MostrarMasAntiguos;
/

7.-Realiza un procedimiento MostrarJefes que reciba el nombre de un departamento y muestre los nombres de los 
empleados de ese departamento que son jefes de otros empleados. Trata las excepciones que consideres necesarias.

create or replace procedure MostrarJefes(p_nombre 	dept.dname%type)
is
	v_coddept 	dept.deptno%type;

	cursor c_emp
	is
	select ename
	from emp
	where empno = (select mgr
				   from emp)
	and deptno=v_coddept;

	v_ind	NUMBER:=0;
begin
	v_coddept:=DevolverCodDept(p_nombre);
	dbms_output.put_line('Jefes del Departamento '||p_nombre);
	if v_coddept>=0 then
		for elem in c_emp loop
			dbms_output.put_line(elem.ename);
			v_ind:=1;
		end loop;
		if v_ind=0 then
			dbms_output.put_line('No hay Jefes');
		end if;
end MostrarJefes;
/

8.-Realiza un procedimiento MostrarMejoresVendedores que muestre los nombres de los dos vendedores con más comisiones. 
Trata las excepciones que consideres necesarias.

create or replace procedure MostrarMejoresVendedores
is
	cursor c_emp
	is
	select ename
	from emp
	where comm is not null
	and job='SALESMAN'
	order by comm desc;

	v_nombre	emp.ename%type;
begin
	ComprobarExcepciones;
	open c_emp;
	for elem in 1..2 loop
		fetch c_emp into v_nombre;
		dbms_output.put_line(v_nombre);
	end loop;
	close c_emp;
end MostrarMejoresVendedores;
/

create or replace procedure ComprobarExcepciones
is
begin
	ComprobarTablaVacia;
	ComprobarSiHayVendedores;
	ComprobarNumComisiones;
end ComprobarExcepciones;
/

create or replace procedure ComprobarTablaVacia
is
	v_num 	NUMBER;
begin
	select count(*) into v_num
	from emp;
	if v_num=0 then
		raise_application_erro(-20001,'Tabla EMP vacia');
	end if;
end ComprobarTablaVacia;
/

create or replace procedure ComprobarSiHayVendedores
is
	v_num 	NUMBER;
begin
	select count(*) into v_num
	from emp
	where job='SALESMAN';
	if v_num=0 then
		raise_application_erro(-20001,'No hay vendedores en la tabla EMP');
	end if;
end ComprobarSiHayVendedores;
/

create or replace procedure ComprobarNumComisiones
is
	v_num 	NUMBER;
begin
	select count(*) into v_num
	from emp
	where comm is not null;
	if v_num<2 then
		raise_application_erro(-20001,'No hay comisiones.');
	end if;
end ComprobarNumComisiones;
/

9.-Realiza un procedimiento MostrarsodaelpmE que reciba el nombre de un departamento al revés y muestre los nombres 
de los empleados de ese departamento. Trata las excepciones que consideres necesarias.

create or replace procedure MostrarsodaelpmE (p_nombre dept.dname%type)
is
	v_nombrealderecho	dept.dname%type;
begin
	v_nombrealderecho:=AlReves(p_nombre);
	MostrarEmpleados(v_nombrealderecho);
end MostrarsodaelpmE;
/

create or replace function AlReves (p_cadena VARCHAR2)
return VARCHAR2
is
	v_aux	VARCHAR2(30):='';			
begin
	for i in reverse 1..length(p_cadena)
	LOOP
		v_aux:=v_aux||substr(p_cad,i,1);
	end LOOP;
	return v_aux;
end;
/

create or replace procedure MostrarEmpleados (p_nombre 	dept.dname%type)
is
	v_deptno	dept.deptno%type;

	cursor c_emp
	is
	select ename
	from emp
	where deptno = v_deptno;
begin
	v_deptno:=DevolverCodDept(p_nombre);
	for elem in c_emp loop
		dbms_output.put_line(elem.ename);
	end loop;
end MostrarEmpleados;
/

10.-Realiza un procedimiento RecortarSueldos que recorte el sueldo un 20% a los empleados cuyo nombre empiece por la 
letra que recibe como parámetro. Trata las excepciones que consideres necesarias.

create or replace procedure RecortarSueldos (p_letra emp.ename%type)
is
begin
	update emp
	set sal = sal - 0.2 * sal
	where substr(ename,1,1) = p_letra;
	if SQL%ROWCOUNT = 0 then
		dbms_output.put_line('No hay empleado que empiece por la letra '||p_letra);
	else
		dbms_output.put_line('Se le ha bajado el sueldo a '||SQL%ROWCOUNT||' trabajadores.');
	end if;
end RecortarSueldos;
/

11.-Realiza un procedimiento BorrarBecarios que borre a los dos empleados más nuevos de cada departamento. 
Trata las excepciones que consideres necesarias.

create or replace procedure BorrarBecarios
is
	cursor c_dept
	is
	select deptno
	from dept;
begin
	for elem in c_dept loop
		BorrarDosBecarios(elem.deptno);
	end loop;
end;
/

create or replace procedure BorrarDosBecarios (p_coddept dept.deptno%type)
is
	cursor c_emp
	is
	select empno
	from emp
	where deptno = p_coddept
	order by hiredate desc;
	
	v_emp c_emp%ROWTYPE;
begin
	emp c_emp;
	fetch c_emp into v_emp;
	while c_emp%FOUND and c_emp%ROWCOUNT<=2 loop
		delete emp
		where empno=v_emp.empno;
		fetch c_emp into v_emp;
	end loop;
	close c_emp;
end;
/